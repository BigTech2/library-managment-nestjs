# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayload {
  data: JSON
  message: String!
}

type AuthRegisterDto {
  data: JSON
  message: String
}

type Book {
  author: String!
  bookCover: String
  bookCoverMimeType: String
  createdAt: DateTime!
  description: String
  detailCards: [DetailCard!]!
  detailTopic: DetailTopic
  id: Int!
  loanDetails: [LoanDetail!]!
  title: String!
  updatedAt: DateTime!
}

type BooksPaginationResult {
  """Whether there are more items to fetch"""
  hasMore: Boolean!

  """List of books"""
  items: [Book!]!

  """Number of items per page/limit"""
  limit: Int!

  """Number of items skipped/offset"""
  offset: Int!

  """Total number of books matching the criteria"""
  total: Int!
}

type Card {
  createdAt: DateTime!
  detailCards: [DetailCard!]!
  id: Int!
  isLoaned: Boolean!
  quantity: Int!
  updatedAt: DateTime!
  user: User!
}

type CardPayload {
  data: JSON
  message: String!
}

input CreateBookInput {
  """Book author"""
  author: String!

  """Book cover image path"""
  bookCover: String

  """Book cover mime type"""
  bookCoverMimeType: String

  """Book description"""
  description: String

  """Book title"""
  title: String!

  """Topic detail ID"""
  topicDetailId: Int
}

input CreateDetailTopicInput {
  name: String!

  """Topic ID"""
  topicId: Int
}

input CreateLoanDetailInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateOverduaWarningInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateTopicInput {
  """Topic name)"""
  topicName: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DetailCard {
  book: Book!
  card: Card!
  createdAt: DateTime!
  id: Int!
  quantity: Int!
}

type DetailCardPayload {
  data: JSON
  message: String!
}

type DetailTopic {
  books: [Book!]
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  name: String!
  topic: Topic!
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Loan {
  brrowDate: DateTime!
  id: Int!
  loanDetails: [LoanDetail!]!
  quantity: Int!
  returnDate: DateTime!
  status: StatusLoanBookEnum!
  user_id: User!
}

type LoanDetail {
  book: Book!
  createdAt: DateTime!
  id: Int!
  loan: Loan!
}

type LoanPayload {
  Data: JSON
  Message: String!
}

type Mutation {
  Logout(refreshToken: String!): AuthPayload!
  Regsiter(email: String!, firstname: String!, lastname: String!, password: String!): AuthRegisterDto!
  createBook(createBookInput: CreateBookInput!): Book!
  createCard: CardPayload!
  createDetailCard(book_id: Int!, card_id: Int!): DetailCardPayload!
  createDetailTopic(createDetailTopicInput: CreateDetailTopicInput!): DetailTopic!
  createLoan(card_id: Float!, returnDate: DateTime!): LoanPayload!
  createLoanDetail(createLoanDetailInput: CreateLoanDetailInput!): LoanDetail!
  createOverduaWarning(createOverduaWarningInput: CreateOverduaWarningInput!): OverduaWarning!
  createTopic(createTopicInput: CreateTopicInput!): Topic!
  deleteDetailCard(detail_card_id: Int!): DetailCardPayload!
  generatetoken(email: String!, password: String!): AuthPayload!
  refreshAccessToken(refreshToken: String!): AuthPayload!
  removeBook(id: Int!): Book!
  removeDetailTopic(id: Int!): DetailTopic!
  removeLoanDetail(id: Int!): LoanDetail!
  removeOverduaWarning(id: Int!): OverduaWarning!
  removeTopic(id: Int!): Topic!
  updateBook(updateBookInput: UpdateBookInput!): Book!
  updateDetailTopic(updateDetailTopicInput: UpdateDetailTopicInput!): DetailTopic!
  updateLoanDetail(updateLoanDetailInput: UpdateLoanDetailInput!): LoanDetail!
  updateLoanStatus(loan_id: Float!, status: Float!): LoanPayload!
  updateOverduaWarning(updateOverduaWarningInput: UpdateOverduaWarningInput!): OverduaWarning!
  updateTopic(updateTopicInput: UpdateTopicInput!): Topic!
}

type OverduaWarning {
  """Example field (placeholder)"""
  exampleField: Int!
}

input PaginationBookInput {
  """Search by book author"""
  author: String

  """Number of items to take"""
  limit: Int! = 10

  """Number of items to skip"""
  offset: Int! = 0

  """Search by book title"""
  title: String

  """Filter by topic detail ID"""
  topicDetailId: Int
}

type Query {
  book(id: Int!): Book!
  books: [Book!]!
  detailTopic(id: Int!): DetailTopic!
  detailTopics: [DetailTopic!]!
  findLoanOnlyForUser(id: Float!): LoanPayload!
  findLoansForUser: LoanPayload!
  getCard: getCardOutput!
  hello: String!
  loan: LoanPayload!
  loanDetail(id: Int!): LoanDetail!
  overduaWarning(id: Int!): OverduaWarning!
  paginatedBooks(paginationInput: PaginationBookInput): BooksPaginationResult!
  topic(id: Int!): Topic!
  topics: [Topic!]!
}

type RefreshToken {
  createdAt: DateTime!
  expiresAt: DateTime!
  id: String!
  token: String!
  user: User!
}

type Role {
  id: Int!
  name: RoleName!
  users: [User!]!
}

"""The role of the user"""
enum RoleName {
  ADMIN
  USER
}

"""The status of a loaned book"""
enum StatusLoanBookEnum {
  DELAY
  LOANING
  RETURNED
}

type Topic {
  createdAt: DateTime!
  deletedAt: DateTime
  detailTopics: [DetailTopic!]!
  id: Int!
  topicName: String!
  updatedAt: DateTime!
}

input UpdateBookInput {
  """Book author"""
  author: String

  """Book cover image path"""
  bookCover: String

  """Book cover mime type"""
  bookCoverMimeType: String

  """Book description"""
  description: String

  """Book ID to update"""
  id: Int!

  """Book title"""
  title: String

  """Topic detail ID"""
  topicDetailId: Int
}

input UpdateDetailTopicInput {
  """Id to update"""
  id: Int!
  name: String

  """Topic ID"""
  topicId: Int
}

input UpdateLoanDetailInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateOverduaWarningInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateTopicInput {
  id: Int!

  """Topic name)"""
  topicName: String
}

type User {
  cards: [Card!]!
  email: String
  firstname: String
  id: Int!
  lastname: String
  loans: [Loan!]!
  password: String
  refreshTokens: [RefreshToken!]!
  role: Role
}

type getCardOutput {
  data: [Card!]
  message: String!
}